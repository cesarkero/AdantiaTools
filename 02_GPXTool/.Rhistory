time = t$time),
proj4string = src.proj), dst.proj))
}
t2 <- UTM29(data=t)
t2
#make spatial data frame
coords <- data.frame(x=t2$x, y = t2$y)
t2.sp <- SpatialPointsDataFrame(coords=coords, data=t2,proj4string = epsg2 )
dim(t2.sp)
## read shp of ppee
PPEE <- readOGR(geo, 'PPEE')
# create buffer 25m by id
PPEE25m <- gBuffer(PPEE, byid= T, width = 25, quadsegs=10)
dim(PPEE25m)
#INTERSECT points with buffer 25m
i <- intersect(t2.sp,PPEE25m)
dim(i)
#merge all
head(t2.sp)
head(i)
r <- merge(t2.sp, i, by="ID", all.x=TRUE)
r
dim(r)
dim(PPEE25m)
dim(i)
dim(t2.sp)
dim(r)
head(r)
min(r$time)
minValue(r$time)
r$time
min(r$ID)
max(r$ID)
max(r$time)
str(r)
time(r$time)
as.date(r$time)
as.Date(r$time)
as.Date.date(r$time)
as.Date.POSIXct(r$time)
as.Date.POSIXlt(r$time)
as.Date.character(r$time)
as.Date.numeric(r$time)
as.Date.default(r$time)
as.Date.dates(r$time)
r$time
t
as.Date.dates(r$time)
r$time
as.date(r$time)
date(r$time)
date(r$time[1])
r$time[1]
r$time[2]
date(a)
as.date(a)
as.Date.character(a)
as.Date.default(a)
a <- r$time[2]
as.Date.default(a)
as.Date.POSIXct(a)
as.Date(a)
as.Date.POSIXlt(a)
as.Date.numeric(a)
as.Date.dates(a)
as.Date.date(a)
as_date(a)
library(lubridate)
as.date(a)
as_date(a)
a
as_time(a)
time(a)
as.hms(a)
as_datetime(a)
as_datea)
as_date(a)
time(a)
as.time(a)
as_time(a)
hms::as.hms(a)
as_date(a)
a
gsub("T",' ',a)
a
gsub("T",' ',r$time)
#replace T and z by blank in gps time
mgsub(c("T","z"), c(' ',' '), a)
#replace T and z by blank in gps time
chartr("Tz", " ", a)
#replace T and z by blank in gps time
chartr("Tz", "  ", a)
a
#replace T and z by blank in gps time
b <- gsub("T", ' ',a)
b
c <- gsub('z', ' ', b)
c
c <- gsub('Z', ' ', b)
c
c <- gsub('Z', '', b)
c
#replace T and z by blank in gps time
a <- gsub("T", ' ',a)
a
a <- gsub('Z', '', a)
a
#transform time
#replace T and z by blank in gps time
r$time <- gsub("T", ' ',r$time)
r$time <- gsub("Z", '',r$time)
r$time[1]
min(r$time)
max(r$time)
#identify min and max hour within each 25m buffer
summarise(r, min=min(time))
class(r)
class(data.frame(r))
#identify min and max hour within each 25m buffer
summarise(data.frame(r), min=min(time))
names(r)
#identify min and max hour within each 25m buffer
data.frame(r) %>%
group_by(Aero) %>%
summarise(minTime=min(time))
#identify min and max hour within each 25m buffer
minT <- data.frame(r) %>%
group_by(Aero) %>%
summarise(minTime=min(time))
ungroup(minT)
names(r)
#identify min and max hour within each 25m buffer
minT <- data.frame(r) %>%
group_by(Cod_aero) %>%
summarise(minTime=min(time))
ungroup(minT)
minT
data.frame(minT)
#identify min and max hour within each 25m buffer
minT <- data.frame(r) %>%
group_by(Aero) %>%
summarise(minTime=min(time))
data.frame(minT)
maxT <- data.frame(r) %>%
group_by(Aero) %>%
summarise(maxTime=max(time))
maxT
data.frame(minT)
data.frame(maxT)
#merge dataframes of min and max within 25m buffer
minmax <- merge(minT, maxT, by="Aero", all.x=T)
minmax
minmax(maxTime)-minmax(minTime)
minmax$maxTime)-minmax$minTime)
minmax$maxTime-minmax$minTime
minmax$maxTime
minmax$maxTime[1]-minmax$minTime[1]
minmax$maxTime[1]
class(minmax$maxTime[1])
time(minmax$maxTime[1])
as_datetime(minmax$maxTime[1])
as_datetime(minmax$maxTime[1])-as_datetime(minmax$minTime[1])
#calculate time betweeen min and max
pt <- as_datetime(minmax$maxTime[1])-as_datetime(minmax$minTime[1])
class(pt)
minutes(pt)
as.numeric(difftime(minmax$maxTime[1]),
as_datetime(minmax$minTime[1]),
units="minutes")
as.numeric(difftime(as_datetime(minmax$maxTime[1])),
as_datetime(minmax$minTime[1]),
units="minutes")
as_datetime(minmax$maxTime[1])
u <- as_datetime(minmax$minTime[1]
as.numeric(difftime(as_datetime(minmax$maxTime[1])),
as_datetime(minmax$minTime[1]),
units="minutes")
u <- as_datetime(minmax$minTime[1]
u <- as_datetime(minmax$minTime[1]
u <- as_datetime(minmax$minTime[1])
v <- as_datetime(minmax$maxTime[1])
difftime(v,u,units="minutes")
u
v
difftime(v,u,units="minutes")
difftime(v,u,units="mins")
difftime(v,u,units="secs")
w[1]
w <- difftime(v,u,units="secs")
w[1]
w[[1]
w[[1]]
as.numeric(difftime(as_datetime(minmax$maxTime[1])),
as_datetime(minmax$minTime[1]),
units="minutes")
w[[1]]
#calculate time betweeen min and max in seconds
mutate(minmax, tiempo_s=difftime(as_datetime(minmax$maxTime),
as_datetime(minmax$minTime),
units="secs"))
#calculate time betweeen min and max in seconds
minmax <- mutate(minmax, tiempo_s=difftime(as_datetime(minmax$maxTime),
as_datetime(minmax$minTime),
units="secs"))
minmax
class(minmax$tiempo_s)
#merge dataframes of min and max within 25m buffer
minmax <- merge(minT, maxT, by="Aero", all.x=T)
#calculate time betweeen min and max in seconds
minmax <- mutate(minmax, tiempo_s=difftime(as_datetime(minmax$maxTime),
as_datetime(minmax$minTime),
units="secs")[[1]])
class(minmax$tiempo_s)
minmax
#merge dataframes of min and max within 25m buffer
minmax <- merge(minT, maxT, by="Aero", all.x=T)
#calculate time betweeen min and max in seconds
minmax <- mutate(minmax, tiempo_s=difftime(as_datetime(minmax$maxTime),
as_datetime(minmax$minTime),
units="secs"))
class(minmax$tiempo_s)
minmax
#merge dataframes of min and max within 25m buffer
minmax <- merge(minT, maxT, by="Aero", all.x=T)
#calculate time betweeen min and max in seconds
minmax <- mutate(minmax, tiempo_s=as.numeric(difftime(as_datetime(minmax$maxTime),
as_datetime(minmax$minTime),
units="secs")))
class(minmax$tiempo_s)
minmax
#merge dataframes of min and max within 25m buffer
minmax <- merge(minT, maxT, by="Aero", all.x=T)
#calculate time betweeen min and max in seconds
minmax <- mutate(minmax,
tiempo_m = as.numeric(difftime(as_datetime(minmax$maxTime),
as_datetime(minmax$minTime),
units="mins")))
minmax
#merge dataframes of min and max within 25m buffer
minmax <- merge(minT, maxT, by="Aero", all.x=T)
#calculate time betweeen min and max in seconds
minmax <- mutate(minmax,
tiempo_s = as.numeric(difftime(as_datetime(minmax$maxTime),
as_datetime(minmax$minTime),
units="secs")))
minmax
t2
#transform time
#replace T and z by blank in gps time
t2$time <- gsub("T", ' ',t2$time)
t2$time <- gsub("Z", '',t2$time)
t2
minmax$minTime
minmax$minTime[1]
minmax$maxTime[1]
#extract values in range minTime and maxTime
subset(t2, time>=minmax$minTime[1] & time<=minmax$maxTime[1])
#extract values in range minTime and maxTime
class(subset(t2, time>=minmax$minTime[1] & time<=minmax$maxTime[1])
#extract values in range minTime and maxTime
class(subset(t2, time>=minmax$minTime[1] & time<=minmax$maxTime[1]))
#extract values in range minTime and maxTime
class(subset(t2, time>=minmax$minTime[1] & time<=minmax$maxTime[1]))
#extract values in range minTime and maxTime
tp25m <- subset(t2, time>=minmax$minTime[1] & time<=minmax$maxTime[1])
l <- cbind(tp25m$x, tp25m$y)
l
Sl <- Line(l)
minmax
minmax$Aero[1]
S1 <- Lines(list(Sl), ID=minmax$Aero[1])
#extract values in range minTime and maxTime
tp1 <- subset(t2, time>=minmax$minTime[1] & time<=minmax$maxTime[1])
#extract values in range minTime and maxTime
tp1 <- subset(t2, time>=minmax$minTime[1] & time<=minmax$maxTime[1])
tp2 <- subset(t2, time>=minmax$minTime[2] & time<=minmax$maxTime[2])
l1 <- cbind(tp1$x, tp1$y)
l2 <- cbind(tp2$x, tp2$y)
Sl2 <- Line(l2)
Sl1 <- Line(l1)
S1 <- Lines(list(Sl1), ID=minmax$Aero[1])
S2 <- Lines(list(Sl2), ID=minmax$Aero[2])
Sl <- SpatialLines(list(S1,S2))
plot(Sl)
# shp output folder
shp.out <- "C:\\GitHub\\AdantiaTools\\02_GPXTool\\shp\\output"
#save shp
writeOGR(obj=Sl, dsn=shp.out, layer="Prospeccion", driver="ESRI Shapefile")
class(Sl)
Slx <- SpatialLinesDataFrame(list(S1,S2))
Slx <- SpatialLinesDataFrame(Sl)
Sl <- SpatialLines(list(S1,S2))
Slx <- SpatialLinesDataFrame(Sl)
Slx <- SpatialLinesDataFrame(sl=Sl)
sl
Sl
plot(Sl)
Sl
Sl[1]
tp1
l1
S1
S1
Slx <- SpatialLinesDataFrame(sl=Sl, data=minmax, match.ID = F)
#extract values in range minTime and maxTime
minmax
#extract values in range minTime and maxTime
minmax[2,]
#extract values in range minTime and maxTime
minmax[1:2,]
#extract values in range minTime and maxTime
msel <- minmax[1:2,]
msel
Slx <- SpatialLinesDataFrame(sl=Sl, data=msel, match.ID = F)
Slx
#save shp
writeOGR(obj=Slx, dsn=shp.out, layer="Prospeccion", driver="ESRI Shapefile")
#save shp
writeOGR(obj=Slx, dsn=shp.out, layer="Prospeccion", driver="ESRI Shapefile")
#save shp
writeOGR(obj=Slx, dsn=shp.out, layer="Prospeccion", driver="ESRI Shapefile", overwrite_layer = T)
#save shp
writeOGR(obj=Slx, dsn=shp.out, layer="Prospeccion", driver="ESRI Shapefile", overwrite_layer = T)
#pasar de spatiallines a spatiallinesdataframe que contenga los datos
Slx <- SpatialLinesDataFrame(sl=Sl, data=msel, match.ID = F, proj4string = epsg2)
epsg2 <- CRS("+init=epsg:25829")
epsg2
#pasar de spatiallines a spatiallinesdataframe que contenga los datos y crs
Slx <- SpatialLinesDataFrame(sl=Sl, data=msel, match.ID = F, proj4string = epsg2)
#pasar de spatiallines a spatiallinesdataframe que contenga los datos y crs
Slx <- SpatialLinesDataFrame(sl=Sl, data=msel, match.ID = F, proj4string = CRS("+proj=longlat +datum=WGS84"))
#pasar de spatiallines a spatiallinesdataframe que contenga los datos y crs
Slx <- SpatialLinesDataFrame(sl=Sl, data=msel, match.ID = F, proj4string = CRS("+proj=longlat +datum=WGS84"))
#pasar de spatiallines a spatiallinesdataframe que contenga los datos y crs
Slx <- SpatialLinesDataFrame(sl=Sl, data=msel, match.ID = F, proj4string(epsg2))
?SpatialLinesDataFrame
Sl <- SpatialLines(list(S1,S2), proj4string = epsg2)
#pasar de spatiallines a spatiallinesdataframe que contenga los datos y crs
Slx <- SpatialLinesDataFrame(sl=Sl, data=msel, match.ID = F)
#save shp
writeOGR(obj=Slx, dsn=shp.out, layer="Prospeccion", driver="ESRI Shapefile", overwrite_layer = T)
#calculate length of lines
l <- LinesLength(Sl)
e
Sl
#calculate length of lines
l <- LinesLength(Slx)
st_length(Sl)
st_length(Slx)
st_length(Slx)
lengths(Sl)
sp_length(Slx)
sp_length(Sl)
st_length(Sl)
st_length(Sl)
minmax
print i
print (i)
#extract values in range minTime and maxTime
for (i in 1:length(minmax)){
print (i)
}
length(minmax)
minmax
minmax
dim(minmax)
print (i)
#extract values in range minTime and maxTime
for (i in minmax){
print (i)
}
dim(minmax)[1]
print (i)
#extract values in range minTime and maxTime
for (i in 1:dim(minmax)[1]){
print (i)
}
#extract values in range minTime and maxTime and join all in SpatialLines
lines.list <- list()
#extract values in range minTime and maxTime and join all in SpatialLines
lines.list <- list()
for (i in 1:dim(minmax)[1]){
tp <- subset(t2, time>=minmax$minTime[i] & time<=minmax$maxTime[i])
l <- cbind(tp$x, tp$y)
Sl <- Line(l)
S <- Lines(list(Sl1), ID=minmax$Aero[i])
append(lines.list,S)
}
lines.list
#extract values in range minTime and maxTime and join all in SpatialLines
lines.list <- list()
for (i in 1:dim(minmax)[1]){
tp <- subset(t2, time>=minmax$minTime[i] & time<=minmax$maxTime[i])
l <- cbind(tp$x, tp$y)
Sl <- Line(l)
S <- Lines(list(Sl1), ID=minmax$Aero[i])
lines.list <- lines.list + S
}
#extract values in range minTime and maxTime and join all in SpatialLines
lines.list <- c()
for (i in 1:dim(minmax)[1]){
tp <- subset(t2, time>=minmax$minTime[i] & time<=minmax$maxTime[i])
l <- cbind(tp$x, tp$y)
Sl <- Line(l)
S <- Lines(list(Sl1), ID=minmax$Aero[i])
lines.list <- lines.list + S
}
?append
#extract values in range minTime and maxTime and join all in SpatialLines
Llist <- list()
for (i in 1:dim(minmax)[1]){
tp <- subset(t2, time>=minmax$minTime[i] & time<=minmax$maxTime[i])
l <- cbind(tp$x, tp$y)
Sl <- Line(l)
S <- Lines(list(Sl1), ID=minmax$Aero[i])
list[[i]] <- S
}
for (i in 1:dim(minmax)[1]){
tp <- subset(t2, time>=minmax$minTime[i] & time<=minmax$maxTime[i])
l <- cbind(tp$x, tp$y)
Sl <- Line(l)
S <- Lines(list(Sl1), ID=minmax$Aero[i])
Llist[[i]] <- S
}
Llist
#definir shp con proyeccion
Sl <- SpatialLines(Llist, proj4string = epsg2)
#create shp with proyeccion
Sl <- SpatialLines(Llist, proj4string = epsg2)
#pasar de spatiallines a spatiallinesdataframe que contenga los datos y crs
Slx <- SpatialLinesDataFrame(sl=Sl, data=msel, match.ID = F)
#pasar de spatiallines a spatiallinesdataframe que contenga los datos y crs
Slx <- SpatialLinesDataFrame(sl=Sl, data=mimax, match.ID = F)
#pasar de spatiallines a spatiallinesdataframe que contenga los datos y crs
Slx <- SpatialLinesDataFrame(sl=Sl, data=minmax, match.ID = F)
#save shp
writeOGR(obj=Slx, dsn=shp.out, layer="Prospeccion", driver="ESRI Shapefile", overwrite_layer = T)
plot(Slx)
dim(Sl)
#create shp with proyeccion
Sl <- SpatialLines(Llist, proj4string = epsg2)
dim(Sl)
#extract values in range minTime and maxTime and join all in SpatialLines
Llist <- list()
for (i in 1:dim(minmax)[1]){
tp <- subset(t2, time>=minmax$minTime[i] & time<=minmax$maxTime[i])
l <- cbind(tp$x, tp$y)
Sl <- Line(l)
S <- Lines(list(Sl1), ID=minmax$Aero[i])
Llist[[i]] <- S
}
#create shp with proyeccion
Sl <- SpatialLines(Llist, proj4string = epsg2)
dim(Sl)
Llist
#extract values in range minTime and maxTime and join all in SpatialLines
Llist <- c()
for (i in 1:dim(minmax)[1]){
tp <- subset(t2, time>=minmax$minTime[i] & time<=minmax$maxTime[i])
l <- cbind(tp$x, tp$y)
Sl <- Line(l)
S <- Lines(list(Sl1), ID=minmax$Aero[i])
Llist[[i]] <- S
}
#extract values in range minTime and maxTime and join all in SpatialLines
Llist <- c(,dim(minmax)[1])
#extract values in range minTime and maxTime and join all in SpatialLines
Llist <- c(,dim(minmax)[1])
dim(minmax)[1]
#extract values in range minTime and maxTime and join all in SpatialLines
Llist <- vector(,dim(minmax)[1])
for (i in 1:dim(minmax)[1]){
tp <- subset(t2, time>=minmax$minTime[i] & time<=minmax$maxTime[i])
l <- cbind(tp$x, tp$y)
Sl <- Line(l)
S <- Lines(list(Sl1), ID=minmax$Aero[i])
Llist[[i]] <- S
}
#extract values in range minTime and maxTime and join all in SpatialLines
Llist <- vector(,dim(minmax)[1])
for (i in 1:dim(minmax)[1]){
tp <- subset(t2, time>=minmax$minTime[i] & time<=minmax$maxTime[i])
l <- cbind(tp$x, tp$y)
Sl <- Line(l)
S <- Lines(list(Sl1), ID=minmax$Aero[i])
Llist[[i]] <- S
}
#extract values in range minTime and maxTime and join all in SpatialLines
Llist <- list()
for (i in 1:dim(minmax)[1]){
tp <- subset(t2, time>=minmax$minTime[i] & time<=minmax$maxTime[i])
l <- cbind(tp$x, tp$y)
Sl <- Line(l)
S <- Lines(list(Sl1), ID=minmax$Aero[i])
Llist[[i]] <- S
}
Llist
class(Llist)
?SpatialLines
Llist[[1]]
#create shp with proyeccion
Sl <- SpatialLines(Llist, proj4string = epsg2)
dim(Sl)
#create shp with proyeccion
Sl <- SpatialLines(LinesList = Llist, proj4string = epsg2)
dim(Sl)
#create shp with proyeccion
Sl <- SpatialLines(list(Llist[1], Llist[2]), proj4string = epsg2)
S
#create shp with proyeccion
Sl <- SpatialLines(list(S), proj4string = epsg2)
dim(Sl)
