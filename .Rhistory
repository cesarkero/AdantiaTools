install.packages(c("exifr","dplyr","devtools","stringr","xlsx","rJava","rlist"))
library(exifr)
library (dplyr)
library(devtools)
library(stringr)
library(xlsx)
library(rJava)
library (rgdal)
library(plotKML)
library(spatial)
library(sf)
library(raster)
library(sp)
# Select the gpx path (use readclipboard() to get the right path in windows).
# Use the gpx.folder as a working directory (just temporary)
g.folder <- "Z:\\De sastre\\CAC\\github\\R_gpx_table\\gpx"
t.folder <- "Z:\\De sastre\\CAC\\github\\R_gpx_table\\tablas"
# tables output folder
t.folder <- "Z:\\De sastre\\CAC\\github\\R_gpx_table\\tablas"
geo <- "Z:\\De sastre\\CAC\\github\\R_gpx_table\\geo"
epsg.gpx <- 4324
epsg.new <- 25829
# Listar archivos solo .gpx
files <- list.files(g.folder, pattern="*.gpx", full.names=T)
files
files
# Select the gpx path (use readclipboard() to get the right path in windows).
# Use the gpx.folder as a working directory (just temporary)
g.folder <- "C:\\GitHub\\AdantiaTools\\02_GPXTool\\gpx\\20130925_26"
# Select the gpx path (use readclipboard() to get the right path in windows).
# Use the gpx.folder as a working directory (just temporary)
g.folder <- "C:\\GitHub\\AdantiaTools\\02_GPXTool\\gpx\\20130925_26"
# tables output folder
t.folder <- "C:\\GitHub\\AdantiaTools\\02_GPXTool\\tablas"
# geo info to make joins
geo <- "C:\\GitHub\\AdantiaTools\\02_GPXTool\\geo"
epsg.gpx <- 4324
epsg.new <- 25829
# list files with .gpx extension
files <- list.files(g.folder, pattern="*.gpx", full.names=T)
files
#leer archivos
gpx1 <- readGPX(files[1],metadata=F,bounds=F, waypoints=T,tracks = T, routes= F)
gpx2 <- readGPX(files[2],metadata=F,bounds=F, waypoints=T,tracks = T, routes= F)
#GENERACION DE TABLAS WP INDICENCIAS, AVES Y COLISIONES
#leer waypoints y pasar a data.frame y cambiar nombre de columnas
cnames <- c('x','y','cod','desc','time','type')
wp1 <- data.frame(gpx1['waypoints'])
colnames(wp1) <- cnames
wp2 <- data.frame(gpx2['waypoints'])
colnames(wp2) <- cnames
#seleccionar incidencias
wp3i <- filter(wp3,cod=='I')
#GENERACION DE TABLAS WP INDICENCIAS, AVES Y COLISIONES
wp1 <- data.frame(gpx1['waypoints'])
wp1
#seleccionar incidencias
wp1i <- filter(wp1,waypoints.name=='I')
#seleccionar avifauna. metodo sencillo seleccionando filas con cod==5
wp1a <- wp3[nchar(wp1$waypoints.name)==5,]
#seleccionar avifauna. metodo sencillo seleccionando filas con cod==5
wp1a <- wp1[nchar(wp1$waypoints.name)==5,]
#seleccionar colisiones
wp1c <- filter(wp1,waypoints.name=='C')
wp1i
wp1a
wp1c
#seleccionar colisiones
wp1c <- filter(wp1,waypoints.name=='001')
wp1c
#any other code
wp1o <- filter(wp1, waypoints.name¡='I' & waypoints.name ¡='C' & nchar(wp1$waypoints.name)¡=5)
#any other code
wp1o <- filter(wp1, waypoints.name!='I' & waypoints.name !='C' & nchar(wp1$waypoints.name)!=5)
wp1o
#exportar tablas a csv
file_name_wp1i <- paste(t.folder,"\\","incidencias_vinculada.csv",sep="")
file_name_wp1a <- paste(t.folder,"\\","avifauna_vinculada.csv",sep="")
file_name_wp1c <- paste(t.folder,"\\","colisiones_vinculada.csv",sep="")
file_name_wp1o <- paste(t.folder,"\\","otros_vinculada.csv",sep="")
write.csv2(wp1i, file = file_name_wp1i,row.names=FALSE, na="")
write.csv2(wp1a, file = file_name_wp1a,row.names=FALSE, na="")
write.csv2(wp1a, file = file_name_wp1c,row.names=FALSE, na="")
write.csv2(wp1a, file = file_name_wp1o,row.names=FALSE, na="")
#exportar tablas a csv
file_name_wp1i <- paste(t.folder,"\\","incidencias_vinculada.csv",sep="")
file_name_wp1a <- paste(t.folder,"\\","avifauna_vinculada.csv",sep="")
file_name_wp1c <- paste(t.folder,"\\","colisiones_vinculada.csv",sep="")
file_name_wp1o <- paste(t.folder,"\\","otros_vinculada.csv",sep="")
#any other code
wp1o <- filter(wp1, waypoints.name!='I' & waypoints.name !='C' & nchar(wp1$waypoints.name)!=5)
wp1o
write.csv2(wp1a, file = file_name_wp1o,row.names=FALSE, na="")
write.csv2(wp1i, file = file_name_wp1i,row.names=FALSE, na="")
write.csv2(wp1a, file = file_name_wp1a,row.names=FALSE, na="")
write.csv2(wp1c, file = file_name_wp1c,row.names=FALSE, na="")
write.csv2(wp1o, file = file_name_wp1o,row.names=FALSE, na="")
#JOIN DE ATRIBUTOS
##leer archivo kml y generar geo
PPEE <- readOGR(geo, PPEE)
#JOIN DE ATRIBUTOS
##leer archivo kml y generar geo
PPEE <- readOGR(geo, PPEE)
#JOIN DE ATRIBUTOS
##leer archivo kml y generar geo
PPEE <- readOGR(geo, PPEE.kml)
# geo info to make joins
geo <- "C:\\GitHub\\AdantiaTools\\02_GPXTool\\geo"
#JOIN DE ATRIBUTOS
##leer archivo kml y generar geo
PPEE <- readOGR(geo, PPEE)
# geo folder to make joins
geo <- "C:\\GitHub\\AdantiaTools\\02_GPXTool\\geo"
#JOIN DE ATRIBUTOS
##leer archivo kml y generar geo
PPEE <- readOGR(geo, PPEE)
#JOIN DE ATRIBUTOS
##leer archivo kml y generar geo
readOGR(geo, PPEE)
#JOIN DE ATRIBUTOS
##leer archivo kml y generar geo
PPEE <- readOGR(geo, PPEE)
#JOIN DE ATRIBUTOS
##leer archivo kml y generar geo
PPEE <- readOGR(geo, 'PPEE.kml')
# geo folder to make joins
geo <- "C:\\GitHub\\AdantiaTools\\02_GPXTool\\geo\\PPEE"
#JOIN DE ATRIBUTOS
##leer archivo kml y generar geo
PPEE <- readOGR(geo, 'PPEE')
PPEEap <- readOGR(geo, 'PPEE_ap')
PPEEap2 <- readOGR(geo, 'PPEE_ap_solapes')
#read trackpoints
#GENERACION DE TABLAS WP INDICENCIAS, AVES Y COLISIONES
wp1 <- data.frame(gpx1['trackpoints'])
#read trackpoints
#GENERACION DE TABLAS WP INDICENCIAS, AVES Y COLISIONES
tp1 <- data.frame(gpx1['trackpoints'])
tp1
#read trackpoints
#GENERACION DE TABLAS WP INDICENCIAS, AVES Y COLISIONES
str(gpx1)
tp1 <- data.frame(gpx1['tracks'])
gpx1['tracks']
type (gpx1['tracks'])
class (gpx1['tracks'])
class (gpx1['tracks'][1])
gpx1['tracks'][1]
gpx1['tracks'][[1]]
#read trackpoints
tp1 <- gpx1['tracks']
purrr::flatten(tp1)
class(purrr::flatten(tp1))
purrr::flatten(tp1)
flatten(tp1)
library(purrr)
flatten(tp1)
merge(tp1)
rbind(tp1)
tp1.bind <- rbind(tp1)
tp1.bind
tp1[1]
tp1[1,]
tp1[[1]
tp1[[1]]
tp1[[1]]
tp1[[1]]
tp1[[0]]
tp1[[59]]
tp1[[50]]
#read trackpoints
tp1 <- gpx1['tracks']
tp1[[50]]
#read trackpoints
gpx1
tp1
data.frame(tp1)
combine(tp1)
combine(tp1)[1]
combine(tp1)[2]
